@using BSG.Common.DTO
@using BSG.States

@inject IUserState State
@inject IGeneralState GeneralState
@inject NavigationManager Navigation
@inject NotificationService NotificationService

@inherits BsgComponentBase


<RadzenColumn Size="6">
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@_usernameLabel"/>
            <RadzenTextBox @bind-Value="@_user!.Username" type="email" Name="txtUsername" Style="width: 100%"
                           MouseEnter="@(args => ShowTooltip(args, "Username"))"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@_fullNameLabel"
                        MouseEnter="@(args => ShowTooltip(args, "FullName"))"/>
            <RadzenTextBox @bind-Value="@_user!.FullName" Name="txtFullName"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@_emailLabel"
                        MouseEnter="@(args => ShowTooltip(args, "Email"))"/>
            <RadzenTextBox @bind-Value="@_user!.Email" type="email" Name="txtEmail"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" Text="@_phoneNumberLabel"/>
            <RadzenTextBox @bind-Value="@_user!.PhoneNumber" type="tel" Name="PhoneNumber"
                           MouseEnter="@(args => ShowTooltip(args, "PhoneNumber"))"/>
            <RadzenRegexValidator Component="PhoneNumber" Pattern="^\d{10}$"
                                  Text="Invalid phone number format"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@_mobileNumberLabel"/>
            <RadzenTextBox @bind-Value="@_user!.MobileNumber" type="tel" Name="MobileNumber"
                           MouseEnter="@(args => ShowTooltip(args, "MobileNumber"))"/>
            <RadzenRegexValidator Component="MobileNumber" Pattern="^\d{10}$"
                                  Text="Invalid phone number format"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenCheckBox @bind-Value="@_user!.IsEnabled" Name="chkIsEnabled"
                            MouseEnter="@(args => ShowTooltip(args, "IsEnabled"))"/>
            <RadzenLabel Text="@_isEnabledLabel" Component="chkIsEnabled" class="rz-ms-2"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text" Gap="0rem">
            <RadzenCheckBox @bind-Value="@_user!.IsEmailConfirmed" Name="chkIsEmailConfirmed"
                            MouseEnter="@(args => ShowTooltip(args, "IsEmailConfirmed"))"/>
            <RadzenLabel Text="@_isEmailConfirmedLabel" Component="chkIsEmailConfirmed" class="rz-ms-2"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenCheckBox @bind-Value="@_user!.IsAdmin" Name="chkIsAdmin"
                            MouseEnter="@(args => ShowTooltip(args, "IsAdmin"))"/>
            <RadzenLabel Text="@_isAdminLabel" Component="chkIsAdmin" class="rz-ms-2"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow Gap="1rem" Style="padding-top: 2rem">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton ButtonType="ButtonType.Submit" Text="@_btnSubmitLabel"
                          Click="@OnSubmit"/>
            <RadzenButton ButtonType="ButtonType.Button" Text="@_btnCancelLabel"
                          Click="@OnCancel"/>
        </RadzenStack>
    </RadzenRow>
</RadzenColumn>


@code {
    [Parameter, EditorRequired] public required EventCallback<UserDto> Submit { get; set; }
    [Parameter, EditorRequired] public required EventCallback Cancel { get; set; }

    private RadzenTextBox tb1 = null!;

    private string _usernameLabel = "";
    private string _fullNameLabel = "";
    private string _emailLabel = "";
    private string _phoneNumberLabel = "";
    private string _mobileNumberLabel = "";
    private string _isEnabledLabel = "";
    private string _isEmailConfirmedLabel = "";
    private string _isAdminLabel = "";
    private string _btnSubmitLabel = "";
    private string _btnCancelLabel = "";

    private string _usernameTooltip = "";
    private string _fullNameTooltip = "";
    private string _emailTooltip = "";
    private string _phoneNumberTooltip = "";
    private string _mobileNumberTooltip = "";
    private string _isEnabledTooltip = "";
    private string _isEmailConfirmedTooltip = "";
    private string _isAdminTooltip = "";
    private string _btnSubmitTooltip = "";
    private string _btnCancelTooltip = "";

    private UserDto? _user;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _component = "UserEdit";
        _metadata = GeneralState.Metadata.Where(r => r.Component.Name == _component).ToList();

        if (_metadata == null)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Metadata Error",
                Detail = $"There is no metadata defined for this component ({_component}).",
                Duration = 5000
            });

            Navigation.NavigateTo("/");
        }

        _user = State!.Selected!.FirstOrDefault();
        if (_user == null)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No User",
                Detail = "The user has not been selected.",
                Duration = 5000
            });

            Navigation.NavigateTo("/");
        }

        ApplyMetadata();
    }

    private void ApplyMetadata()
    {
        if (_metadata == null || _user == null)
            return;

        _usernameLabel = GetTitle("Username");
        _fullNameLabel = GetTitle("FullName");
        _emailLabel = GetTitle("Email");
        _phoneNumberLabel = GetTitle("PhoneNumber");
        _mobileNumberLabel = GetTitle("MobileNumber");
        _isEnabledLabel = GetTitle("IsEnabled");
        _isEmailConfirmedLabel = GetTitle("IsEmailConfirmed");
        _isAdminLabel = GetTitle("IsAdmin");
        _btnSubmitLabel = GetTitle("BtnSubmit");
        _btnCancelLabel = GetTitle("BtnCancel");

        _usernameTooltip = GetTooltip("Username");
        _fullNameTooltip = GetTooltip("FullName");
        _emailTooltip = GetTooltip("Email");
        _phoneNumberTooltip = GetTooltip("PhoneNumber");
        _mobileNumberTooltip = GetTooltip("MobileNumber");
        _isEnabledTooltip = GetTooltip("UsernameIsEnabled");
        _isEmailConfirmedTooltip = GetTooltip("IsEmailConfirmed");
        _isAdminTooltip = GetTooltip("IsAdmin");
        _btnSubmitTooltip = GetTooltip("BtnSubmit");
        _btnCancelTooltip = GetTooltip("BtnCancel");
    }

    private async Task OnSubmit()
    {
        await Submit.InvokeAsync(_user);
    }

    private async Task OnCancel()
    {
        await Cancel.InvokeAsync();
    }

}