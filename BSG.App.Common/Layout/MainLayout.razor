@using BSG.App.Common.Helpers
@using BSG.Common.DTO
@inherits LayoutComponentBase

@inject Bootstrap Bootstrap
@inject TooltipService Tooltip
@inject NavigationManager Navigation

<RadzenLayout Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-sidebar'">
    <RadzenHeader>
        <ChildContent>
            <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0px">
                <RadzenColumn Size="5">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSidebarToggle Click="@(() => _sidebarExpanded = !_sidebarExpanded)"/>
                        <span style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">BSG Proof of Concept</span>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="7">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center"
                                 JustifyContent="JustifyContent.End">
                        <RadzenButton Click="ReloadMetadata" Text="Reload Metadata"
                                      MouseEnter="@(args => ShowTooltip(args, "Change logged user"))"/>
                        <RadzenButton Click="ChangeUser" Text="@(_user?.FullName ?? "No User")"
                                      MouseEnter="@(args => ShowTooltip(args, "Change logged user"))"/>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </ChildContent>
    </RadzenHeader>
    <RadzenBody>
        <ChildContent>
            <RadzenContentContainer Name="main">
                <RadzenRow Gap="2em" class="ez-pt-6 rx-px-0 rz-px-sm-8 rx-px-xl-12">
                    @Body
                </RadzenRow>
            </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>

    <RadzenSidebar @bind-Expanded="@_sidebarExpanded" class="demos-sidebar"
                   style="display: flex; flex-direction: column">
        <NavMenu/>
    </RadzenSidebar>

</RadzenLayout>

<RadzenComponents/>

@code
{
    /*private RadzenSidebar _sidebar0 = null!;
    private RadzenBody _body0 = null!;*/
    
    /*private RadzenButton _wcagColorsInfo = null!;
    private RadzenButton _rtlInfo = null!;
    private RadzenButton _freeThemesInfo = null!;
    private RadzenButton _premiumThemesInfo = null!;*/

    private bool _sidebarExpanded = true;
    //private bool _configSidebarExpanded = false;

    private UserDto? _user;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        await GetUser();
    }

    private async Task GetUser()
    {
        _user = await Bootstrap.GetUser() ?? new UserDto
        {
            Id = 0,
            FullName = "No User"
        };
    }

    private void ShowTooltip(ElementReference reference, string tooltip, TooltipOptions? options = null)
    {
        var opts = options ??
                   new TooltipOptions
                   {
                       Delay = 500,
                       Position = TooltipPosition.Bottom
                   };

        Tooltip.Open(reference, tooltip, opts);
    }

    private async Task ChangeUser()
    {
        await Bootstrap.ChangeUser();

        await GetUser();
        
        StateHasChanged();
        
        Navigation.NavigateTo("/");
    }

    private async Task ReloadMetadata()
    {
        await Bootstrap.ReloadMetadata();
        
        StateHasChanged();
        
        Navigation.NavigateTo("/");
    }
}
