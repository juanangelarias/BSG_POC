@using BSG.Common.DTO
@using BSG.Common.Model
@using BSG.States

@inject IUserState State
@inject IGeneralState GeneralState
@inject NotificationService NotificationService
@inject NavigationManager Navigation

@inherits BsgComponentBase

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced" AllowSorting="true"
                PageSize="12" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true" ColumnWidth="30px" Data="@_data"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single"
                LoadData="@LoadData" IsLoading="@_isLoading">
    <HeaderTemplate>
        <RadzenColumn Width="50%">

        </RadzenColumn>
        <RadzenColumn Width="50%" Align="TextAlign.Right">
            <RadzenButton Icon="add" @onclick="@Create" Style="width: 100%" Title="@_btnCreateMetadata.DisplayName"
                          Disabled="@(!_btnCreateMetadata.IsEnabled)" Visible="@(_btnDeleteMetadata.IsVisible)"
                          MouseEnter="@(args => ShowTooltip(args, _btnCreateMetadata.Tooltip))"/>
        </RadzenColumn>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(UserDto.Username)" Filterable="true" Title="@_colUsernameMetadata.DisplayName"
                              Sortable="true" Width="125" TextAlign="TextAlign.Left" Visible="@_colUsernameMetadata.IsVisible"
                              HeaderTooltip="@_colUsernameMetadata.Tooltip"/>
        <RadzenDataGridColumn Property="@nameof(UserDto.FullName)" Filterable="true" Title="@_colFullNameMetadata.DisplayName"
                              HeaderTooltip="@_colFullNameMetadata.Tooltip" Visible="@_colFullNameMetadata.IsVisible"
                              Sortable="true" Width="125" TextAlign="TextAlign.Left"/>
        <RadzenDataGridColumn Property="@nameof(UserDto.IsAdmin)" Filterable="true" Title="@_colIsAdminMetadata.DisplayName"
                              Sortable="true" Width="125" TextAlign="TextAlign.Center"
                              HeaderTooltip="@_colIsAdminMetadata.Tooltip" Visible="@_colIsAdminMetadata.IsVisible"/>
        <RadzenDataGridColumn Width="75" Sortable="false" Filterable="false">
            <Template Context="data">
                <RadzenButton Icon="edit" Click="@(() => Edit(data.Id))" Style="width: 50%" Text="@_btnEditMetadata.DisplayName"
                              Disabled="@(!_btnEditMetadata.IsEnabled)" Visible="@(_btnEditMetadata.IsVisible)"
                              MouseEnter="@(args => ShowTooltip(args, _btnEditMetadata.Tooltip))"
                              ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"/>
                <RadzenButton Icon="delete" Click="@(() => Delete(data.Id))" Style="width: 50%" Text="@_btnDeleteMetadata.DisplayName"
                              Disabled="@(!_btnDeleteMetadata.IsEnabled)" Visible="@(_btnDeleteMetadata.IsVisible)"
                              MouseEnter="@(args => ShowTooltip(args, _btnDeleteMetadata.Tooltip))"
                              ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"/>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter, EditorRequired] public EventCallback OnEdit { get; set; }
    [Parameter, EditorRequired] public EventCallback OnDelete { get; set; }

    private bool _isLoading;
    private IEnumerable<UserDto> _data = [];

    private MetadataDetail _colUsernameMetadata = null!;
    private MetadataDetail _colFullNameMetadata = null!;
    private MetadataDetail _colIsAdminMetadata = null!;
    private MetadataDetail _btnEditMetadata = null!;
    private MetadataDetail _btnDeleteMetadata = null!;
    private MetadataDetail _btnCreateMetadata = null!;


    protected override void OnInitialized()
    {
        _component = "UserList";

        base.OnInitialized();

        _colUsernameMetadata = GetBlankMetadata();
        _colFullNameMetadata = GetBlankMetadata();
        _colIsAdminMetadata = GetBlankMetadata();
        _btnEditMetadata = GetBlankMetadata();
        _btnDeleteMetadata = GetBlankMetadata();
        _btnCreateMetadata = GetBlankMetadata();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        ApplyMetadata();
    }

    private void ApplyMetadata()
    {
        _metadata = GeneralState.Metadata.Where(r => r.Component.Name == _component).ToList();

        if (_metadata == null || _metadata.Count == 0)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Metadata Error",
                Detail = $"There is no metadata defined for this component ({_component}).",
                Duration = 5000
            });
            
            Navigation.NavigateTo("/");
        }
        
        _colUsernameMetadata = GetMetadata("colUsername");
        _colFullNameMetadata = GetMetadata("colFullName");
        _colIsAdminMetadata = GetMetadata("colIsAdmin");
        _btnEditMetadata = GetMetadata("BtnEdit");
        _btnDeleteMetadata = GetMetadata("btnDelete");
        _btnCreateMetadata = GetMetadata("btnCreate");
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        await Load(new QueryParams
        {
            Filter = "",
            Descending = false,
            Expand = true,
            PageIndex = 0,
            PageSize = 12,
            Sort = ""
        });

        _data = State.List;
    }

    private async Task LoadData(LoadDataArgs args)
    {
        var qp = new QueryParams
        {
            Filter = args.Filter,
            Sort = args.OrderBy,
            Descending = false,
            PageSize = args.Top ?? 12,
            PageIndex = (args.Skip ?? 0) / (args.Top ?? 12)
        };

        await Load(qp);

        _data = State.List;
    }

    private async Task Load(QueryParams parms)
    {
        _isLoading = true;

        await State.Get(parms);
        
        _isLoading = false;
    }

    private async Task Create()
    {
        State.SetSelected(0);

        await OnEdit.InvokeAsync();
    }

    private async Task Edit(long id)
    {
        State.SetSelected(id);

        await OnEdit.InvokeAsync();
    }

    private async Task Delete(long id)
    {
        State.SetSelected(id);

        await OnDelete.InvokeAsync();
    }
}