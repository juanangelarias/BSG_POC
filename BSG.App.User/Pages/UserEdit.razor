@using BSG.Common.DTO
@using BSG.Common.Model
@using BSG.States

@inject IUserState State
@inject IGeneralState GeneralState
@inject NavigationManager Navigation
@inject NotificationService NotificationService

@inherits BsgComponentBase


<RadzenColumn Size="6">
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@_usernameMetadata.DisplayName"/>
            <RadzenTextBox @bind-Value="@_user!.Username" type="email" Name="txtUsername" Style="width: 100%"
                           MouseEnter="@(args => ShowTooltip(args, _usernameMetadata.Tooltip))"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@_fullNameMetadata.DisplayName"
                        MouseEnter="@(args => ShowTooltip(args, _fullNameMetadata.Tooltip))"/>
            <RadzenTextBox @bind-Value="@_user!.FullName" Name="txtFullName"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@_emailMetadata.DisplayName"
                        MouseEnter="@(args => ShowTooltip(args, _emailMetadata.Tooltip))"/>
            <RadzenTextBox @bind-Value="@_user!.Email" type="email" Name="txtEmail"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" Text="@_phoneNumberMetadata.DisplayName"/>
            <RadzenTextBox @bind-Value="@_user!.PhoneNumber" type="tel" Name="PhoneNumber"
                           MouseEnter="@(args => ShowTooltip(args, _phoneNumberMetadata.Tooltip))"/>
            <RadzenRegexValidator Component="PhoneNumber" Pattern="^\d{10}$"
                                  Text="Invalid phone number format"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Text="@_mobileNumberMetadata.DisplayName"/>
            <RadzenTextBox @bind-Value="@_user!.MobileNumber" type="tel" Name="MobileNumber"
                           MouseEnter="@(args => ShowTooltip(args, _mobileNumberMetadata.Tooltip))"/>
            <RadzenRegexValidator Component="MobileNumber" Pattern="^\d{10}$"
                                  Text="Invalid phone number format"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenCheckBox @bind-Value="@_user!.IsEnabled" Name="chkIsEnabled"
                            MouseEnter="@(args => ShowTooltip(args, _isEnabledMetadata.Tooltip))"/>
            <RadzenLabel Text="@_isEnabledMetadata.DisplayName" Component="chkIsEnabled" class="rz-ms-2"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text" Gap="0rem">
            <RadzenCheckBox @bind-Value="@_user!.IsEmailConfirmed" Name="chkIsEmailConfirmed"
                            MouseEnter="@(args => ShowTooltip(args, _isEmailConfirmedMetadata.Tooltip))"/>
            <RadzenLabel Text="@_isEmailConfirmedMetadata.DisplayName" Component="chkIsEmailConfirmed" class="rz-ms-2"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow>
        <RadzenCard size="12" Variant="Variant.Text">
            <RadzenCheckBox @bind-Value="@_user!.IsAdmin" Name="chkIsAdmin"
                            MouseEnter="@(args => ShowTooltip(args, _isAdminMetadata.Tooltip))"/>
            <RadzenLabel Text="@_isAdminMetadata.DisplayName" Component="chkIsAdmin" class="rz-ms-2"/>
        </RadzenCard>
    </RadzenRow>
    <RadzenRow Gap="1rem" Style="padding-top: 2rem">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton ButtonType="ButtonType.Submit" Text="@_btnSubmitMetadata.DisplayName"
                          MouseEnter="@(args => ShowTooltip(args, _btnSubmitMetadata.Tooltip))"
                          Click="@OnSubmit"/>
            <RadzenButton ButtonType="ButtonType.Button" Text="@_btnCancelMetadata.DisplayName"
                          MouseEnter="@(args => ShowTooltip(args, _btnCancelMetadata.Tooltip))"
                          Click="@OnCancel"/>
        </RadzenStack>
    </RadzenRow>
</RadzenColumn>


@code {
    [Parameter, EditorRequired] public required EventCallback<UserDto> Submit { get; set; }
    [Parameter, EditorRequired] public required EventCallback Cancel { get; set; }

    private Metadata _usernameMetadata = null!;
    private Metadata _fullNameMetadata = null!;
    private Metadata _emailMetadata = null!;
    private Metadata _phoneNumberMetadata = null!;
    private Metadata _mobileNumberMetadata = null!;
    private Metadata _isEnabledMetadata = null!;
    private Metadata _isEmailConfirmedMetadata = null!;
    private Metadata _isAdminMetadata = null!;
    private Metadata _btnSubmitMetadata = null!;
    private Metadata _btnCancelMetadata = null!;

    private UserDto? _user;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _component = "UserEdit";
        _metadata = GeneralState.Metadata.Where(r => r.Component.Name == _component).ToList();

        if (_metadata == null)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Metadata Error",
                Detail = $"There is no metadata defined for this component ({_component}).",
                Duration = 5000
            });

            Navigation.NavigateTo("/");
        }

        _user = State!.Selected!.FirstOrDefault();
        if (_user == null)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No User",
                Detail = "The user has not been selected.",
                Duration = 5000
            });

            Navigation.NavigateTo("/");
        }

        ApplyMetadata();
    }

    private void ApplyMetadata()
    {
        if (_metadata == null || _user == null)
            return;

        _usernameMetadata = GetMetadata("Username");
        _fullNameMetadata = GetMetadata("FullName");
        _emailMetadata = GetMetadata("Email");
        _phoneNumberMetadata = GetMetadata("PhoneNumber");
        _mobileNumberMetadata = GetMetadata("MobileNumber");
        _isEnabledMetadata = GetMetadata("IsEnabled");
        _isEmailConfirmedMetadata = GetMetadata("IsEmailConfirmed");
        _isAdminMetadata = GetMetadata("IsAdmin");
        _btnSubmitMetadata = GetMetadata("BtnSubmit");
        _btnCancelMetadata = GetMetadata("BtnCancel");
    }

    private async Task OnSubmit()
    {
        await Submit.InvokeAsync(_user);
    }

    private async Task OnCancel()
    {
        await Cancel.InvokeAsync();
    }

}